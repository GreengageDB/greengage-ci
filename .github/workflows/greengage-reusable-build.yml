name: Greengage Reusable Docker Build Workflow

on:
  workflow_call:
    inputs:
      version:
        description: 'Version derived from tag (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Explicit for default behavior
      packages: write # Required to push to GHCR
      actions: write  # Required for cache
    steps:
      # Checkout default branch if no ref is specified
      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive
          fetch-depth: 0  # Full history for tag resolution

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry for local PRs
      - name: Login to GitHub Container Registry
        if: github.head_ref != '' && github.event.pull_request.head.repo.full_name == github.event.repository.full_name
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      # Renew git tags
      - name: Fetch all tags
        run: git fetch --tags --force

      # Build Docker intermediate image with commit SHA tag
      - name: Build Docker image
        id: build_image
        env:
          EVENT: ${{ github.event_name }}
        run: |
          # Construct image name with version and OS
          IMAGE=ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          IMAGE=${IMAGE,,}

          # Run unit tests only in PRs
          [[ "${EVENT}" == "pull_request" ]] && unset SKIP_UNITTESTS || export SKIP_UNITTESTS=1

          # DEVELOPMENT! Deb package building
          export SKIP_UNITTESTS=1

          # Build from Dockerfile specific to target OS with SHA tag
          docker build \
            --build-arg SKIP_UNITTESTS \
            --tag ${IMAGE}:${{ github.sha }} \
            -f ci/Dockerfile.${{ inputs.target_os }}${{ inputs.target_os_version }} \
            .

      # Save Docker image
      - name: Save SHA image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          IMAGE=${IMAGE,,}
          docker save ${IMAGE}:${{ github.sha }} > ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar

      # Cache SHA image
      - name: Cache SHA image
        uses: actions/cache@v4
        with:
          path: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          key: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}

      # Push developer's tag image if pull-request and same repository
      - name: Push developer's tag image
        if: github.head_ref != '' && github.event.pull_request.head.repo.full_name == github.event.repository.full_name
        env:
          HEAD_REF: ${{ github.head_ref }}
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          IMAGE=${IMAGE,,}
          DEV_TAG=$(echo "$HEAD_REF" | sed 's/[^a-zA-Z0-9._-]/_/g') ; DEV_TAG=${DEV_TAG:-unknown}
          echo "dev_tag=$DEV_TAG" >> $GITHUB_OUTPUT
          docker tag ${IMAGE}:${{ github.sha }} ${IMAGE}:$DEV_TAG
          docker push ${IMAGE}:${{ github.sha }}
          docker push ${IMAGE}:$DEV_TAG
