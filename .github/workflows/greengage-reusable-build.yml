name: Greengage Reusable Docker Build Workflow

on:
  workflow_call:
    inputs:
      version:
        description: 'Version derived from tag (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Explicit for default behavior
      packages: write # Required to push to GHCR
    steps:
      # Checkout default branch if no ref is specified
      - name: Checkout Greengage repo
        if: ${{ inputs.ref == '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          submodules: recursive
          fetch-depth: 0  # Full history for tag resolution

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      # Build and push Docker intermediate image with commit SHA tag
      - name: Build and push
        id: build_and_push
        run: |
          # Construct image name with version and OS without tag
          IMAGE=ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          IMAGE=${IMAGE,,}

          # Build from Dockerfile specific to target OS and push with SHA tag
          docker build --tag ${IMAGE}:${{ github.sha }} --push -f ci/Dockerfile.${{ inputs.target_os }}${{ inputs.target_os_version }} .

          # Make additional developer's tag if pull-request
          if [ -n "${{ github.head_ref }}" ] ; then
              # DEV_TAG is sanitized branch name
              DEV_TAG=$(echo ${{ github.head_ref }} | sed 's/[^a-zA-Z0-9._-]/_/g') ; DEV_TAG=${DEV_TAG:-unknown}
              docker tag ${IMAGE}:${{ github.sha }} ${IMAGE}:$DEV_TAG
              docker push ${IMAGE}:$DEV_TAG
          fi
