name: Greengage Reusable Regression Tests with PXF on GitHub

# Trigger for reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: 'Greengage version (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS for build (e.g., ubuntu, centos, rockylinux)'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version (e.g., 22, 7, 8)'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  regression:  # Regression tests
    runs-on: ubuntu-latest
    timeout-minutes: 180
    permissions:
      contents: read  # Explicit for default behavior
      packages: read  # Explicit for GHCR access clarity
      actions: write  # Required for cache and artifact upload
    steps:
      # Define all variables here
      - name: Set variables
        run: |
          DOCKERFILE="ci/Dockerfile.${{ github.job }}"
          IMAGE_NAME="ggdb${{ inputs.version }}_pxf_${{ inputs.target_os }}${{ inputs.target_os_version }}"
          IMAGE_FULL="ghcr.io/${{ github.repository }}/${IMAGE_NAME}:${{ github.sha }}"

          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_FULL=${IMAGE_FULL,,}" >> $GITHUB_ENV
          echo "DOCKERFILE=${DOCKERFILE}" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=${IMAGE_NAME}_${{ github.sha }}.tar" >> $GITHUB_ENV

      # Restore SHA image from cache
      - name: Restore SHA image from cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.ARCHIVE_NAME }}
          key:  ${{ env.IMAGE_NAME }}

      # Load SHA image
      - name: Load SHA image
        run: |
          docker load < ${{ env.ARCHIVE_NAME }}
          rm -f ${{ env.ARCHIVE_NAME }}

      # Run Regression tests
      - name: Regression test
        run: |
          mkdir logs
          docker run --user root:root \
            -v ./logs:/logs \
            --sysctl 'kernel.sem=500 1024000 200 4096' \
            --privileged \
            ${{ env.IMAGE_FULL }} \
            bash -c "
              set +e
              cd /tmp/build || status=1
              pxf_src/ci/test_${{ github.job }}.sh
              status=\$?
              find /tmp/build/pxf_src/fdw -type f -name *.diffs -exec mv -f {} /logs \;
              echo \">>> STATUS \$status\"
              exit \${status:-1}
            "

      # Upload regression artifacts
      - name: Upload ${{ github.job }} artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}_${{ env.IMAGE_NAME }}
          path: logs
          retention-days: 7
          if-no-files-found: warn  # Warning if no artifacts are found
