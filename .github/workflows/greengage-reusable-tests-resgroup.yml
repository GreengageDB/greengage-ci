# Environment variables
env:
  COMPOSE_HTTP_TIMEOUT: 400

# Trigger for reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: 'Greengage version (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS for build (e.g., ubuntu, centos, rockylinux)'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version (e.g., 22, 7, 8)'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument (ignored)'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  optimizer:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        optimizer: ${{ fromJson(inputs.version == '6' && '["postgres"]' || '["orca", "postgres"]') }}
    permissions:
      contents: read  # Explicit for default behavior
      packages: read  # Explicit for GHCR access clarity
      actions: write  # Required for cache and artifact upload

    steps:
      # Checkout repository with specified ref or default
      - name: Setup QEMU
        run: |
          set -eux
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y qemu-kvm qemu-utils cloud-image-utils libguestfs-tools

      - uses: actions/cache@v4
        id: cache-qemu
        with:
          path: ~/.cache/qemu
          key: ubuntu-22.04-image

      - name: Download Ubuntu cloud image
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: |
          set -eux
          mkdir -p ~/.cache/qemu
          wget -O ~/.cache/qemu/ubuntu-22.04.img \
            https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img

      - name: Create VM disk and cloud-init config
        run: |
          set -eux
          mkdir -p logs vm-home vm-work
          cd vm-work

          # Extract kernel from cloud image for usin as external
          virt-get-kernel ~/.cache/qemu/ubuntu-22.04.img

          # Copy base image and resize
          cp ~/.cache/qemu/ubuntu-22.04.img vm-disk.qcow2
          qemu-img resize vm-disk.qcow2 20G
          
          # Create cloud-init user-data
          cat > user-data <<EOF
          #cloud-config
          users:
            - name: gpadmin
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              uid: $(id -u)

          write_files:
            - path: /etc/fstab
              append: true
              content: |
                hostshare /home/gpadmin 9p trans=virtio,version=9p2000.L,rw,_netdev 0 0

          runcmd:
            - mount -t 9p -o trans=virtio,version=9p2000.L hostshare /home/gpadmin
            - curl -sSL https://get.docker.com/ | sh
            - systemctl enable docker
            - systemctl start docker
            - usermod -aG docker gpadmin
            - mkdir -p /var/run
            - chmod 666 /var/run/docker.sock
            - echo '{"hosts": ["unix:///var/run/docker.sock", "tcp://0.0.0.0:2375"]}' > /etc/docker/daemon.json
            - systemctl restart docker
          EOF

          # Create meta-data
          echo "instance-id: github-actions-vm" > meta-data
          
          # DEBUG
          pwd
          ls -lah ./

          # Create cloud-init ISO
          cloud-localds seed.img user-data meta-data

      - name: Start QEMU VM with shared volume and cgroups v1
        run: |
          set -eux
          cd vm-work

          # Start QEMU VM with kernel parameters for cgroups v1
          qemu-system-x86_64 \
            -machine type=pc,accel=kvm \
            -cpu host \
            -smp 4 \
            -m 8192 \
            -drive file=vm-disk.qcow2,format=qcow2,if=virtio \
            -drive file=seed.img,format=raw,if=virtio \
            -netdev user,id=net0,hostfwd=tcp::2375-:2375 \
            -device virtio-net-pci,netdev=net0 \
            -fsdev local,security_model=passthrough,id=fsdev0,path=../vm-home \
            -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare \
            -kernel vmlinuz \
            -initrd initrd \
            -append "root=/dev/vda1 ro console=tty1 console=ttyS0 systemd.unified_cgroup_hierarchy=0" \
            -display none \
            -daemonize \
            -pidfile qemu.pid

          # Wait for VM to boot and Docker to be available
          echo "Waiting for VM to boot and Docker to start..."
          timeout=300
          while [ $timeout -gt 0 ]; do
            if nc -z localhost 2375; then
              if docker -H tcp://localhost:2375 info > /dev/null 2>&1; then
                echo "VM and Docker are ready!"
                break
              fi
            fi
            sleep 5
            timeout=$((timeout - 5))
          done
          
          if [ $timeout -eq 0 ]; then
            echo "VM failed to start within timeout"
            exit 1
          fi

      - name: Configure host to use Docker in VM
        run: |
          set -eux
          export DOCKER_HOST="tcp://localhost:2375"
          echo "DOCKER_HOST=${DOCKER_HOST}" >>$GITHUB_ENV
          
          # Test Docker connection
          docker info
          docker version

      # Restore SHA image from cache
      - name: Restore SHA image from cache
        uses: actions/cache/restore@v4
        with:
          path: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          key: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}

      # Move Docker image to shared directory
      - name: Move Docker image to shared directory
        run: mv ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar vm-home/

      # Load image directly from shared volume
      - name: Load SHA image in VM from shared volume
        run: |
          # Wait a bit for shared volume to be fully mounted
          sleep 10

          # Load Docker image from shared volume
          docker load < /home/gpadmin/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar

          # Clean up the tar file from shared volume
          rm vm-home/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar

      - name: Resource groups test ${{ github.job }} ${{ matrix.optimizer }}
        env:
          IMAGE: ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}:${{ github.sha }}
          TEST_OS: ${{ inputs.target_os }}
          STATEMENT_MEM: ${{ inputs.version == '7' && '125MB' || '250MB' }}
          OPTIMIZER: ${{ matrix.optimizer == 'orca' && 'on' || 'off' }}
        run: |
          export IMAGE=${IMAGE,,}
          # Get test script from image NOT from repo
          docker create --name temp-container $IMAGE
          docker cp temp-container:/home/gpadmin/gpdb_src/ci/scripts/run_resgroup_test.bash ./run_resgroup_test.bash
          docker rm temp-container
          ./run_resgroup_test.bash

      - name: Upload resgroup ${{ github.job }} ${{ matrix.optimizer }} artifacts
        if: always()  # Run even if previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: resgroup_ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.job }}_${{ matrix.optimizer }}
          path: vm-home/logs
          retention-days: 7
          if-no-files-found: warn  # Warning if no artifacts are found

      - name: Cleanup VM
        if: always()  # Always cleanup, even if job fails
        run: |
          if [ -d vm-work ]; then
            cd vm-work
            if [ -f qemu.pid ]; then
              sudo kill $(cat qemu.pid) || true
              sleep 5
              # Force kill if still running
              if kill -0 $(cat qemu.pid) 2>/dev/null; then
                sudo kill -9 $(cat qemu.pid) || true
              fi
            fi
            cd ..
          fi
