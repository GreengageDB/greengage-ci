# Environment variables
env:
  COMPOSE_HTTP_TIMEOUT: 400

# Trigger for reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: 'Greengage version (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS for build (e.g., ubuntu, centos, rockylinux)'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version (e.g., 22, 7, 8)'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument (ignored)'
        required: false
        type: string
        default: ''
      ref:
        description: 'Branch or ref to checkout'
        required: false
        type: string
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  resgroup:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Explicit for default behavior
      packages: read  # Explicit for GHCR access clarity
      actions: write  # Required for artifact upload

    steps:
      # Determine registry namespace for external user
      - name: Determine registry namespace
        id: set-namespace
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "namespace=${{ github.event.pull_request.head.repo.full_name }}" >> $GITHUB_OUTPUT
          else
            echo "namespace=${{ github.repository }}" >> $GITHUB_OUTPUT
          fi

      # Checkout repository with specified ref or default
      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ inputs.ref || github.ref }}
          submodules: recursive

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      - name: Setup Lima
        uses: lima-vm/lima-actions/setup@v1
        id: lima-actions-setup

      - uses: actions/cache@v4
        with:
          path: ~/.cache/lima
          key: lima-${{ steps.lima-actions-setup.outputs.version }}

      - name: Start the guest VM
        run: |
          set -eux
          limactl start \
            --name=default \
            --cpus=4 \
            --memory=8 \
            --containerd=none \
            --mount-type 9p \
            --set '.mounts=[{"location":"~/","writable":true, "9p": { "securityModel": "mapped-xattr", "cache": "mmap"}}] | .portForwards=[{"guestSocket":"/var/run/docker.sock","hostSocket":"{{.Dir}}/sock/docker.sock"}]' \
            template://ubuntu-20.04.yaml

      - name: Install dockerd in the guest VM
        run: |
          set -eux
          lima sudo mkdir -p /etc/systemd/system/docker.socket.d
          cat <<-EOF | lima sudo tee /etc/systemd/system/docker.socket.d/override.conf
          [Socket]
          SocketUser=$(whoami)
          EOF
          lima curl -fsSL https://get.docker.com -o get-docker.sh
          lima sudo sh get-docker.sh

      - name: Configure the host to use dockerd in the guest VM
        run: |
          set -eux
          sudo systemctl disable --now docker.service docker.socket
          export DOCKER_HOST="unix://$(limactl ls --format '{{.Dir}}/sock/docker.sock' default)"
          echo "DOCKER_HOST=${DOCKER_HOST}" >>$GITHUB_ENV
          docker info
          docker version

      - name: Resource groups test
        env:
          IMAGE: ghcr.io/${{ steps.set-namespace.outputs.namespace }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}:${{ github.sha }}
        run: |
          export IMAGE=${IMAGE,,}
          ./ci/scripts/run_resgroup_test.bash

      - name: Upload resgroup artifacts
        if: always()  # Run even if previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}_ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          path: |
            ./logs_cdw
            ./logs_sdw1
          retention-days: 7
          if-no-files-found: warn  # Warning if no artifacts are found
