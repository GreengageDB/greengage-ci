# Environment variables
env:
  COMPOSE_HTTP_TIMEOUT: 400
  DOCKER_COMPOSE: "docker compose"
  PROJECT: "resgroup"

# Trigger for reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: 'Greengage version (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS for build (e.g., ubuntu, centos, rockylinux)'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version (e.g., 22, 7, 8)'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument (ignored)'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  resgroup:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Explicit for default behavior
      packages: read  # Explicit for GHCR access clarity
      actions: write  # Required for cache and artifact upload

    steps:
      # Checkout repository with specified ref or default
      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive

      - name: Setup Lima
        uses: lima-vm/lima-actions/setup@v1
        id: lima-actions-setup

      - uses: actions/cache@v4
        with:
          path: ~/.cache/lima
          key: lima-${{ steps.lima-actions-setup.outputs.version }}

      - name: Start the guest VM
        run: |
          set -eux
          limactl start \
            --name=default \
            --cpus=4 \
            --memory=8 \
            --containerd=none \
            --mount-type 9p \
            --set '.mounts=[{"location":"~/","writable":true, "9p": { "securityModel": "mapped-xattr", "cache": "mmap"}}] | .portForwards=[{"guestSocket":"/var/run/docker.sock","hostSocket":"{{.Dir}}/sock/docker.sock"}]' \
            template://ubuntu-20.04.yaml

      - name: Install dockerd in the guest VM
        run: |
          set -eux
          lima sudo mkdir -p /etc/systemd/system/docker.socket.d
          cat <<-EOF | lima sudo tee /etc/systemd/system/docker.socket.d/override.conf
          [Socket]
          SocketUser=$(whoami)
          EOF
          lima curl -fsSL https://get.docker.com -o get-docker.sh
          lima sudo sh get-docker.sh --version 20.10

      - name: Configure the host to use dockerd in the guest VM
        run: |
          set -eux
          sudo systemctl disable --now docker.service docker.socket
          export DOCKER_HOST="unix://$(limactl ls --format '{{.Dir}}/sock/docker.sock' default)"
          echo "DOCKER_HOST=${DOCKER_HOST}" >>$GITHUB_ENV
          docker info
          docker version

      # Restore SHA image from cache
      - name: Restore SHA image from cache
        uses: actions/cache/restore@v4
        with:
          path: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          key: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}

      # Copy tar file to Lima VM
      - name: Copy Docker image tar to Lima VM
        run: |
          limactl copy ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar default:/home/runner/

      # Load SHA image in Lima VM
      - name: Load SHA image in Lima VM
        run: |
          lima docker load < /home/runner/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          lima rm /home/runner/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar

      - name: Resource groups test
        env:
          IMAGE: ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}:${{ github.sha }}
        run: |
          export IMAGE=${IMAGE,,}
          ./ci/scripts/run_resgroup_test.bash

      - name: Collect logs
        if: always()  # Run even if previous step fails
        run: |
          cat > collect_logs.bash << EOF
          # set -x
          params=(
            "./ d gpAdminLogs"
            "gpdb_src/src/test/ d results"
            "gpdb_src/src/test/ f regression.diffs"
            "gpdb_src/gpAux/gpdemo/datadirs/ d pg_log"
          )
          for param in "\${params[@]}"; do
            read -r path type name <<< "\$param"
            find \$path -name \$name -type \$type -exec tar -rf "/logs/\$name.tar" "{}" \;
            chmod -R a+rwX /logs
          done
          exit \$EXIT_CODE
          EOF

          for node in cdw sdw1; do
            $DOCKER_COMPOSE -p $PROJECT -f ci/docker-compose.yaml exec -T \
              $node /bin/bash < ./collect_logs.bash
          done

      - name: Upload resgroup artifacts
        if: always()  # Run even if previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}_ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          path: |
            ./logs_cdw/*.tar
            ./logs_sdw1/*.tar
          retention-days: 7
          if-no-files-found: warn  # Warning if no artifacts are found
