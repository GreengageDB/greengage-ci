name: Greengage Reusable Docker Retag and Upload Workflow

on:
  workflow_call:
    inputs:
      version:
        description: 'Version derived from tag (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument'
        required: false
        type: string
        default: ''
      ref:
        description: 'Branch or ref to checkout'
        required: false
        type: string
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  upload:
    runs-on: ubuntu-latest
    permissions:
      packages: write  # Required to push to GHCR
    steps:
      # Checkout default branch if no ref is specified
      - name: Checkout Greengage repo
        if: ${{ inputs.ref == '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          submodules: recursive
          fetch-depth: 0  # Full history for tag resolution

      # Checkout specific branch or tag if ref is provided
      - name: Checkout specified ref
        if: ${{ inputs.ref != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ inputs.ref }}
          submodules: recursive
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      # Generate tags based on commit SHA, branch, or tag
      - name: Determine image tags
        id: set_tag
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "sha_tag=$SHORT_SHA" >> $GITHUB_OUTPUT
          # Use latest tag or 'unknown' if none found
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/\//_/g' || echo "unknown")
          echo "build_version=$VERSION" >> $GITHUB_OUTPUT
          # For pull requests, create a safe branch-based tag
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            SAFE_BRANCH=$(echo ${{ github.head_ref }} | sed 's/[^a-zA-Z0-9._-]/_/g')
            echo "branch_tag=$SAFE_BRANCH" >> $GITHUB_OUTPUT
          # For tagged pushes, use the tag as the version
          elif [[ "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            echo "version_tag=$VERSION" >> $GITHUB_OUTPUT
          fi

      # Retag and push image based on event type
      - name: Upload
        run: |
          # Construct image name with version and OS
          IMAGE=ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          SHA_IMAGE_TAG=$IMAGE:${{ steps.set_tag.outputs.sha_tag }}

          # For pull requests, tag with branch name and push
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.set_tag.outputs.branch_tag }}" != "" ]]; then
            BRANCH_IMAGE_TAG=$IMAGE:${{ steps.set_tag.outputs.branch_tag }}
            docker tag $SHA_IMAGE_TAG $BRANCH_IMAGE_TAG
            docker push $BRANCH_IMAGE_TAG

          # For tagged pushes, tag with version and push
          elif [[ "${{ github.ref }}" =~ ^refs/tags/ && "${{ steps.set_tag.outputs.version_tag }}" != "" ]]; then
            VERSION_IMAGE_TAG=$IMAGE:${{ steps.set_tag.outputs.version_tag }}
            docker tag $SHA_IMAGE_TAG $VERSION_IMAGE_TAG
            docker push $VERSION_IMAGE_TAG
          fi
