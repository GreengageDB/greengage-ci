name: Greengage Reusable Docker Retag and Upload Workflow

on:
  workflow_call:
    inputs:
      version:
        description: 'Version derived from tag (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true
      DOCKERHUB_USERNAME:
        description: 'DockerHub username for authentication'
        # required: true
        required: false
      DOCKERHUB_TOKEN:
        description: 'DockerHub token for authentication'
        # required: true
        required: false

jobs:
  upload:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Explicit for default behavior
      packages: write # Required to push to GHCR
    steps:
      # Checkout default branch if no ref is specified
      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive
          fetch-depth: 0  # Full history for tag resolution

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Fetch all tags
        run: git fetch --tags --force

      # Login to GitHub Container Registry for local PRs
      - name: Login to GitHub Container Registry
        if: github.head_ref != '' && github.event.pull_request.head.repo.full_name == github.event.repository.full_name
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      # Login to DockerHub for local PRs
      - name: Login to DockerHub
        if: github.head_ref != '' && github.event.pull_request.head.repo.full_name == github.event.repository.full_name
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Restore SHA image from cache
      - name: Restore SHA image from cache
        uses: actions/cache/restore@v4
        with:
          path: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          key: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}

      # Load SHA image
      - name: Load SHA image
        run: |
          docker load < ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          rm -f ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar

      - name: Tag and push Docker image
        env:
          REF: ${{ github.ref }}
          IMAGE: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
        run: |
          GHCR_IMAGE=ghcr.io/${{ github.repository }}/${IMAGE}       ; export GHCR_IMAGE=${GHCR_IMAGE,,}
          DOCKERHUB_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE} ; export DOCKERHUB_IMAGE=${DOCKERHUB_IMAGE,,}

          # For tagged pushes, tag with git tag and check if it's the latest semantic tag
          if [[ "$REF" =~ ^refs/tags/ ]]; then
            # All HEAD ref tags
            SEMANTIC_TAGS=$(git tag --merged | grep -E "^${{ inputs.version }}\.[0-9]+\.[0-9]+$" | sort -V)
            # Get the latest semantic tag
            LATEST_SEMANTIC_TAG=$(echo "$SEMANTIC_TAGS" | tail -n 1)
            # Check if the current tag is the latest semantic tag
            if [[ "$TAG" == "$LATEST_SEMANTIC_TAG" ]]; then
              LATEST='latest'
              echo "Current tag $TAG is the latest semantic tag"
            else
              LATEST=''
              echo "Current tag $TAG is not the latest semantic tag (latest is $LATEST_SEMANTIC_TAG)"
            fi
            TAG=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/\//_/g' || echo "unknown")
            docker tag $GHCR_IMAGE:${{ github.sha }} $DOCKERHUB_IMAGE:$TAG && docker push $DOCKERHUB_IMAGE:$TAG || true
          else
            # For push to branch (e.g., main or 6.x) TAG is sanitized branch name
            LATEST='testing'
            unset TAG
            # Update latest at GHCR for master pushes only
            docker tag $GHCR_IMAGE:${{ github.sha }} $GHCR_IMAGE:latest && docker push $GHCR_IMAGE:latest
          fi

          # If image was tagged
          [ -n "$TAG" ]    && docker tag $GHCR_IMAGE:${{ github.sha }} $GHCR_IMAGE:$TAG         && docker push $GHCR_IMAGE:$TAG

          # If tag is really latest or testing
          [ -n "$LATEST" ] && docker tag $GHCR_IMAGE:${{ github.sha }} $DOCKERHUB_IMAGE:$LATEST && docker push $DOCKERHUB_IMAGE:$LATEST || true

      # - name: Delete GHCR tags except latest
      #   env:
      #     IMAGE: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
      #   run: |
      #     tags=$(gh api repos/${{ github.repository }}/packages/container/${IMAGE}/versions -H "Accept: application/vnd.github+json" | jq -r '.[].metadata.container.tags[] | select(. != "latest")' || true)
      #     if [ -z "$tags" ]; then
      #       echo "No tags found for ${IMAGE} (excluding latest) or failed to fetch tags. Skipping deletion."
      #       exit 0
      #     fi
      #     for tag in $tags; do
      #       version_id=$(gh api repos/${{ github.repository }}/packages/container/${IMAGE}/versions -H "Accept: application/vnd.github+json" | jq -r --arg tag "$tag" '.[] | select(.metadata.container.tags[] == $tag) | .id' || true)
      #       if [ -n "$version_id" ]; then
      #         echo "Deleting ${IMAGE}:$version_id"
      #         gh api repos/${{ github.repository }}/packages/container/${IMAGE}/versions/$version_id -X DELETE || echo "Failed to delete tag $tag (version $version_id). Continuing."
      #       else
      #         echo "Version ID for tag $tag not found. Skipping."
      #       fi
      #     done
