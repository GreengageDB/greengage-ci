name: Greengage Reusable Package Workflow

on:
  workflow_call:
    inputs:
      version:
        description: 'Version derived from tag (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS'
        required: true
        type: string
      rebuild_builder:
        description: 'Rebuild builder image required'
        required: false
        type: boolean
        default: false
      test_lima:
        description: 'Lima Template (e.g., ubuntu-22.04) for deploy test. Skip if empty'
        required: false
        type: string
        default: ''
      test_docker:
        description: 'Docker Image (e.g., ubuntu:22.04, ubuntu:noble) for deploy test. Skip if empty'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  build-deb:
    if: inputs.target_os == 'ubuntu'
    runs-on: ubuntu-latest
    env:
      BUILDER: ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}:builder
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          path: gpdb_src
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      - name: Build Debian packages
        env:
          BUILDER: ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}
        run: |
          docker run --rm \
            -v ./deb-packages:/home/gpadmin/gpdb_src/Release \
            -e BUILDNUMBER=${{ github.run_number }} \
            "${BUILDER,,}":${{ github.ref }} \
            /bin/bash -c "make -C ./gpdb_src/gpAux pkg-deb"
      - name: Upload Debian artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages
          path: deb-packages

  test-docker:
    if: inputs.test_docker != ''
    env:
      TEST_DOCKER: ${{ inputs.test_docker }}
    needs: build-deb
    runs-on: ubuntu-latest
    steps:
      - name: Download deb artifacts
        uses: actions/download-artifact@v4
        with:
          name: deb-packages
          path: deb-packages
      - name: Start Docker container and install deb package
        run: |
          set -eux
          docker run --rm -v ./deb-packages:/deb-packages \
            "${TEST_DOCKER}" /bin/bash -c "\
              export DEBIAN_FRONTEND=noninteractive && \
              apt-get update && \
              { apt-get install -y /deb-packages/*.deb 2>&1 || dpkg -i /deb-packages/*.deb 2>&1; } && \
              apt-get install -f -y"
