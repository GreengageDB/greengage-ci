name: Greengage Reusable Package Workflow

on:
  workflow_call:
    inputs:
      version:
        description: 'Version derived from tag (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS'
        required: true
        type: string
      rebuild_builder:
        description: 'Rebuild builder image required'
        required: false
        type: boolean
        default: false
      test_lima:
        description: 'Lima Template (e.g., ubuntu-22.04) for deploy test. Skip if empty'
        required: false
        type: string
        default: ''
      test_docker:
        description: 'Docker Image (e.g., ubuntu:22.04, ubuntu:noble) for deploy test. Skip if empty'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  build-deb:
    if: inputs.target_os == 'ubuntu'
    runs-on: ubuntu-latest
    env:
      BUILDER: ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}:builder
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          path: gpdb_src
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}
      - name: Check Builder Dockerfile changed
        id: dockerfile-changed
        uses: tj-actions/changed-files@v46
        with:
          files: |
            gpdb_src/ci/Dockerfile.ubuntu.builder
      - name: Build Docker Builder image
        if: steps.dockerfile-changed.outputs.any_changed == 'true'
        run: docker build --push -f ./gpdb_src/ci/Dockerfile.ubuntu.builder -t ${BUILDER,,} ./gpdb_src/
      - name: Build Debian packages
        env:
          REF: ${{ github.ref }}
        run: |
          # Get available CPU cores
          CPU_CORES=$(nproc)
          
          docker run --rm \
            -v $(pwd)/gpdb_src:/home/gpadmin/gpdb_src \
            -e BUILDNUMBER=${{ github.run_number }} \
            ${BUILDER,,} \
            /bin/bash -c "
              git config --global --add safe.directory '*' && \
              make -C ./gpdb_src/gpAux pkg-deb
            "
      - name: Upload Debian artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages
          path: |
            gpdb_src/*.deb
            gpdb_src/*.ddeb
            gpdb_src/*.build
            gpdb_src/*.buildinfo
            gpdb_src/*.changes

  test-lima:
    if: inputs.test_lima != ''
    needs: build-deb
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Lima
        uses: lima-vm/lima-actions/setup@v1
        id: lima-actions-setup
      - name: Cache Lima
        uses: actions/cache@v4
        with:
          path: ~/.cache/lima
          key: lima-${{ steps.lima-actions-setup.outputs.version }}
      - name: Download deb artifacts
        uses: actions/download-artifact@v4
        with:
          name: deb-packages
          path: ./deb-packages
      - name: Start the guest VM
        run: |
          set -eux
          limactl start \
            --name=default \
            --cpus=4 \
            --memory=8 \
            --containerd=none \
            --mount-type=9p \
            --set '.mounts=[{"location":"~/","writable":true,"9p":{"securityModel":"mapped-xattr","cache":"mmap"}}]' \
            template://${{ inputs.test_lima }}
      - name: Install deb package with apt in Lima
        run: |
          cat << 'EOF' > ./deb-packages/install_deb.sh
          #!/bin/bash
          set -eux
          cd /home/runner
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          if apt-get install -y *.deb; then
            exit 0
          else
            dpkg -i *.deb
            apt-get install -f -y
          fi
          EOF
          limactl copy -r ./deb-packages default:/home/runner
          limactl shell default sudo bash install_deb.sh 2>&1 | tee install.log
      - name: Upload install logs
        uses: actions/upload-artifact@v4
        with:
          name: install-logs
          path: install.log
      - name: Cleanup Lima
        if: always()
        run: |
          limactl stop default || true
          limactl delete default || true

  test-docker:
    if: inputs.test_docker != ''
    needs: build-deb
    runs-on: ubuntu-latest
    steps:
      - name: Download deb artifacts
        uses: actions/download-artifact@v4
        with:
          name: deb-packages
          path: ./deb-packages
      - name: Start Docker container and install deb package
        run: |
          set -eux
          docker run --rm -v $(pwd)/deb-packages:/deb-packages ${{ inputs.test_docker }} /bin/bash -c "\
            export DEBIAN_FRONTEND=noninteractive && \
            apt-get update && \
            { apt-get install -y /deb-packages/*.deb 2>&1 || dpkg -i /deb-packages/*.deb 2>&1; } && \
            apt-get install -f -y 2>&1" | tee install.log
      - name: Upload install logs
        uses: actions/upload-artifact@v4
        with:
          name: install-logs-docker
          path: install.log
