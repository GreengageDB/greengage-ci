name: Greengage Reusable ORCA Tests

# Environment variables
env:
  COMPOSE_HTTP_TIMEOUT: 400
  DOCKER_COMPOSE: "docker compose"

# Trigger for reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: 'Greengage version (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS for build (e.g., ubuntu, centos, rockylinux)'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version (e.g., 22, 7, 8)'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument (ignored)'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  orca:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Explicit for default behavior
      actions: write  # Required for cache and artifact upload
    steps:
      # Checkout repository with shallow clone
      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive

      # Restore SHA image from cache
      - name: Restore SHA image from cache
        uses: actions/cache/restore@v4
        with:
          path: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          key: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}

      # Load SHA image
      - name: Load SHA image
        run: |
          docker load < ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar

      # Run ORCA Linter
      - name: ORCA Linter
        run: |
          docker build -t orca-linter:test -f ci/Dockerfile.linter .
          docker run      orca-linter:test

      # Run ORCA Unit test using the passed image tag
      - name: ORCA Unit test
        env:
          IMAGE: ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}:${{ github.sha }}
        run: |
          export IMAGE=${IMAGE,,}
          docker run \
            -v gpAux:/home/gpadmin/gpdb_src/gpAux \
            $IMAGE bash -c "gpdb_src/concourse/scripts/unit_tests_gporca.bash"

      # Upload ORCA artifacts
      - name: Upload ORCA artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}_ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          path: gpAux/ext
          retention-days: 7
          if-no-files-found: warn  # Warning if no artifacts are found
