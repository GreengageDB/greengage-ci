name: Greengage Reusable Behave Tests

# Environment variables
env:
  CI_REPO: GreengageDB/greengage-ci
  CI_PATH: .ci
  COMPOSE_HTTP_TIMEOUT: 400
  DOCKER_COMPOSE: "docker compose"

# Trigger for reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: 'Greengage version (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS for build (e.g., ubuntu, centos, rockylinux)'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version (e.g., 22, 7, 8)'
        required: true
        type: string
      python3:
        description: 'Python3 build argument (ignored)'
        required: false
        type: string
        default: ''
      ref:
        description: 'Branch or ref to checkout'
        required: false
        type: string
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      build_version: ${{ steps.set_tag.outputs.build_version }}
    steps:
      # Checkout repository with specified ref or default
      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ inputs.ref || github.ref }}
          submodules: recursive
          fetch-depth: 0

      # Set up Docker Compose using docker/setup-compose-action
      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      # Determine image tags
      - name: Determine image tags
        id: set_tag
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/\//_/g')
          echo "sha_tag=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "build_version=$VERSION" >> $GITHUB_OUTPUT
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            SAFE_BRANCH=$(echo ${{ github.head_ref }} | sed 's/[^a-zA-Z0-9._-]/_/g')
            echo "branch_tag=$SAFE_BRANCH" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            echo "version_tag=$VERSION" >> $GITHUB_OUTPUT
          fi

      # Create allure-results directory
      - name: Create allure-results directory
        run: |
          rm -rf allure-results
          mkdir -p allure-results -m 777

      # Generate SSH keys
      - name: Generate SSH keys
        run: |
          mkdir -p ssh_keys
          if [ ! -e "ssh_keys/id_rsa" ]; then
            ssh-keygen -P "" -f ssh_keys/id_rsa
          fi

  behave:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        feature: [gpstop, gpstart, gpcheck]
    permissions:
      contents: read
      packages: read
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          temp-reserve-mb: 32
          swap-size-mb: 32
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ inputs.ref || github.ref }}
          submodules: recursive
          fetch-depth: 0

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_token }}

      - name: Run Behave feature ${{ matrix.feature }}
        continue-on-error: true
        env:
          IMAGE: ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}:${{ needs.setup.outputs.build_version }}
          FEATURE: ${{ matrix.feature }}
          CLUSTER: ~concourse_cluster
          PROJECT: ${{ matrix.feature }}_demo
        run: |
          # Initialize containers
          bash ci/scripts/init_containers.sh $PROJECT

          # Run Behave tests
          $DOCKER_COMPOSE -p $PROJECT -f ci/docker-compose.yaml exec -T \
            -e FEATURE="$FEATURE" -e BEHAVE_FLAGS="--tags $FEATURE --tags=$CLUSTER \
              -f behave_utils.ci.formatter:CustomFormatter \
              -o non-existed-output \
              -f allure_behave.formatter:AllureFormatter \
              -o /tmp/allure-results/$FEATURE" \
            cdw gpdb_src/ci/scripts/behave_gpdb.bash
          status=$?

          # Copy allure-results
          mkdir -p allure-results
          cp -r /tmp/allure-results/$FEATURE allure-results/ || echo "No $FEATURE allure-results found"

          # Copy logs
          mkdir -p logs_cdw logs_sdw1
          cp -r /tmp/logs_cdw logs_cdw/ || echo "No cdw logs found"
          cp -r /tmp/logs_sdw1 logs_sdw1/ || echo "No sdw1 logs found"

          # Debug: List copied files
          ls -lR allure-results/ logs_cdw/ logs_sdw1/

          exit $status

      # Upload feature artifacts
      - name: Upload feature artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: behave-${{ matrix.feature }}-results
          path: |
            allure-results/${{ matrix.feature }}
            logs_cdw
            logs_sdw1
          retention-days: 7

  collect-results:
    needs: behave
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ inputs.ref || github.ref }}
          submodules: recursive
          fetch-depth: 0

      # Download artifacts from behave jobs
      - name: Download feature artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: behave-*-results
          merge-multiple: true

      # Install Allure CLI
      - name: Install Allure CLI
        if: always()
        run: |
          # Download Allure .deb package
          curl -o allure_2.34.0-1_all.deb -L https://github.com/allure-framework/allure2/releases/download/2.34.0/allure_2.34.0-1_all.deb
          # Update package index
          sudo apt-get update
          # Install Allure and dependencies
          sudo apt-get install -y ./allure_2.34.0-1_all.deb
          # Remove .deb file
          rm allure_2.34.0-1_all.deb
          # Verify installation
          allure --version

      # Generate Allure report
      - name: Generate Allure report
        if: always()
        run: |
          # Move all allure-results to one directory
          mkdir -p allure-results
          find artifacts -type d -name "allure-results" -exec cp -r {}/* allure-results/ \;
          # Generate report
          [ -d allure-results ] && allure generate allure-results -o allure-report --clean || echo "No allure-results to generate report"

      # Package test results and logs
      - name: Package test results and logs
        if: always()
        env:
          ARTIFACT_NAME: behave_tests_results_ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ needs.setup.outputs.build_version }}
        run: |
          # Create artifacts directory
          mkdir -p artifacts/final
          # Copy results and logs
          for dir in allure-results logs_cdw logs_sdw1 allure-report; do
            [ -d "$dir" ] && cp -r "$dir" artifacts/final/ || echo "No $dir found"
          done
          # Create tar.gz archive
          tar -czf ${{ env.ARTIFACT_NAME }}.tar.gz -C artifacts/final .
          # List contents for debugging
          tar -tzf ${{ env.ARTIFACT_NAME }}.tar.gz

      # Upload final artifact
      - name: Upload final artifact
        if: always()
        env:
          ARTIFACT_NAME: behave_tests_results_ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ needs.setup.outputs.build_version }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          retention-days: 7
