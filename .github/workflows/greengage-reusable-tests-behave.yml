name: Greengage Reusable Behave Tests

# Environment variables
env:
  COMPOSE_HTTP_TIMEOUT: 400
  DOCKER_COMPOSE: "docker compose"

# Trigger for reusable workflow
on:
  workflow_call:
    inputs:
      version:
        description: 'Greengage version (e.g., 6 or 7)'
        required: true
        type: string
      target_os:
        description: 'Target OS for build (e.g., ubuntu, centos, rockylinux)'
        required: true
        type: string
      target_os_version:
        description: 'Target OS version (e.g., 22, 7, 8)'
        required: false
        type: string
        default: ''
      python3:
        description: 'Python3 build argument (ignored)'
        required: false
        type: string
        default: ''
    secrets:
      ghcr_token:
        description: 'GitHub token for GHCR access'
        required: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      feature_matrix: ${{ steps.set-matrix.outputs.feature_matrix }}
    steps:
      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive

      - name: Get feature list
        id: set-matrix
        run: |
          behave_tests_dir="gpMgmt/test/behave/mgmt_utils"
          features=$(ls $behave_tests_dir -1 | grep feature | grep -v -E "cross_subnet|gpssh|gpperfmon|gpexpand" | sed 's/\.feature$//')
          feature_array=$(echo "$features" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "feature_matrix=$feature_array" >> $GITHUB_OUTPUT

  behave:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        feature: ${{ fromJson(needs.generate-matrix.outputs.feature_matrix) }}
    permissions:
      contents: read  # Explicit for default behavior
      packages: read  # Explicit for GHCR access clarity
      actions: write  # Required for cache and artifact upload
    steps:
      # Restore SHA image from cache
      - name: Restore SHA image from cache
        uses: actions/cache/restore@v4
        with:
          path: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          key: ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}

      # Load SHA image
      - name: Load SHA image
        run: |
          docker load < ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar
          rm -f ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}.tar

      # Maximize build space for Docker
      - name: Move /var/lib/docker/
        run: sudo mv /var/lib/docker/ "${GITHUB_WORKSPACE}/docker"

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          temp-reserve-mb: 32
          swap-size-mb: 32
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'false'
          build-mount-path: '/var/lib/docker/'

      - name: Restore /var/lib/docker/
        run: sudo sh -c "mv ${GITHUB_WORKSPACE}/docker/* /var/lib/docker"

      - name: Checkout Greengage repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      # Create allure-results directory
      - name: Create allure-results directory
        run: |
          rm -rf allure-results
          mkdir -p allure-results -m 777

      # Generate SSH keys
      - name: Generate SSH keys
        run: |
          mkdir -p ssh_keys
          if [ ! -e "ssh_keys/id_rsa" ]; then
            ssh-keygen -P "" -f ssh_keys/id_rsa
          fi

      - name: Run Behave feature ${{ matrix.feature }}
        # continue-on-error: true
        env:
          IMAGE: ghcr.io/${{ github.repository }}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}:${{ github.sha }}
          FEATURE: ${{ matrix.feature }}
          CLUSTER: ~concourse_cluster
          PROJECT: ${{ matrix.feature }}_demo
        run: |
          export IMAGE=${IMAGE,,}
          # # Initialize containers
          # bash ci/scripts/init_containers.sh $PROJECT
          set -ex -o pipefail
          $DOCKER_COMPOSE -p $PROJECT -f ci/docker-compose.yaml --env-file ci/.env up -d
          services=$($DOCKER_COMPOSE -p $PROJECT -f ci/docker-compose.yaml config --services | tr '\n' ' ')

          # Prepare ALL containers first
          for service in $services
          do
            $DOCKER_COMPOSE -p $PROJECT -f ci/docker-compose.yaml exec -T \
              $service bash -c "mkdir -p /data/gpdata && chmod -R 777 /data &&
                source gpdb_src/concourse/scripts/common.bash && install_gpdb &&
                ./gpdb_src/concourse/scripts/setup_gpadmin_user.bash" &
          done
          wait

          # Add host keys to known_hosts after containers setup
          for service in $services
          do
            $DOCKER_COMPOSE -p $PROJECT -f ci/docker-compose.yaml exec -T \
              $service bash -c "ssh-keyscan ${services/$service/} >> /home/gpadmin/.ssh/known_hosts" &
          done
          wait

          # Run Behave tests
          set +e
          $DOCKER_COMPOSE -p $PROJECT -f ci/docker-compose.yaml exec -T \
            -e FEATURE="$FEATURE" \
            -e BEHAVE_FLAGS="--tags $FEATURE --tags=$CLUSTER \
              -f behave_utils.ci.formatter:CustomFormatter \
              -o non-existed-output \
              -f allure_behave.formatter:AllureFormatter \
              -o /tmp/allure-results" \
            cdw gpdb_src/ci/scripts/behave_gpdb.bash
          status=$?

          # Collect logs
          cat > collect_logs_${{ matrix.feature }}.bash << EOF
          set -x
          ls -lah
          params=(
            "./ d gpAdminLogs"
            "gpdb_src/gpAux/gpdemo/datadirs/ d pg_log"
          )
          for param in "\${params[@]}"; do
            read -r path type name <<< "\$param"
            find \$path -name \$name -type \$type -exec rsync -a "{}" "/logs/" \;
            chmod -R a+rX /logs
          done
          exit \$EXIT_CODE
          EOF

          for node in cdw sdw1; do
            $DOCKER_COMPOSE -p $PROJECT -f ci/docker-compose.yaml exec -T \
              $node /bin/bash < ./collect_logs_${{ matrix.feature }}.bash
          done

          # DEBUG
          set -x
          env
          ls -lah
          ls -lah logs_cdw/
          ls -lah logs_sdw1/
          ls -lah allure-results/

          # Debug: exit code
          echo "Exit code: '$status'"
          exit ${status:-1} # erro if not known

      # Upload feature artifacts
      - name: Upload feature artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: behave_${{ matrix.feature }}_ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_results
          path: |
            allure-results
            logs_cdw
            logs_sdw1
          retention-days: 7
          if-no-files-found: ignore  # Ignore if no artifacts are found

  collect-results:
    needs: behave
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Explicit for default behavior
      packages: read  # Explicit for GHCR access clarity
      actions: write  # Required for artifact upload
    steps:
      # Download artifacts from behave jobs
      - name: Download feature artifacts
        if: always()
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: behave_*_results
          merge-multiple: true

      # Install Allure CLI
      - name: Install Allure CLI
        if: always()
        run: |
          # Download Allure .deb package
          curl -o allure_2.34.0-1_all.deb -L https://github.com/allure-framework/allure2/releases/download/2.34.0/allure_2.34.0-1_all.deb
          # Update package index
          sudo apt-get update
          # Install Allure and dependencies
          sudo apt-get install -y ./allure_2.34.0-1_all.deb
          # Remove .deb file
          rm allure_2.34.0-1_all.deb
          # Verify installation
          allure --version

      # Generate Allure report
      - name: Generate Allure report
        if: always()
        run: |
          cd artifacts
          [ -d allure-results ] && allure generate allure-results -o allure-report --clean || echo "No allure-results to generate report"

      # Upload final artifact
      - name: Upload final artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: behave_all_ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
          path: artifacts
          retention-days: 7
          if-no-files-found: warn  # Warning if no artifacts are found
