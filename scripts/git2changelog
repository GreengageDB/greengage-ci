#!/bin/bash
#
# Generate changelog in Debian or RPM format from git history
#
# Usage: git2changelog [deb|rpm] [--last-tag] [--all-commits]
#
# Features:
# - Supports both Debian and RPM formats
# - --last-tag (-l): Only show changes since last tagged version
# - --all-commits (-a): Include all commits (not just PRs)
# - Default: only include commits with "(#[number])" in message

# Regular expression for version tags
RE_VERSION='[0-9]\+\([.-][0-9]\+\)*'
# Package name defaults to current directory name
PACKAGE=${GPDIR:-gpdb}

# Show help if no arguments
if [[ $# -eq 0 ]]; then
    echo "Usage: $0 [deb|rpm] [-l|--last-tag] [-a|--all-commits]"
    echo "  deb|rpm   - Output format (required)"
    echo "  -l, --last-tag    - Only show changes since last version"
    echo "  -a, --all-commits - Include all commits (ignore PR filter)"
    exit 1
fi

# Parse arguments
FORMAT=""
LAST_TAG=false
ALL_COMMITS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        deb|rpm) FORMAT="$1" ;;
        -l|--last-tag) LAST_TAG=true ;;
        -a|--all-commits) ALL_COMMITS=true ;;
        *) echo "Invalid argument: $1"; exit 1 ;;
    esac
    shift
done

# Validate format selection
if [[ -z "$FORMAT" ]]; then
    echo "Error: Output format (deb or rpm) must be specified"
    exit 1
fi

function generate_deb_entry() {
    local range_start=$1
    local version=$2
    local commit=$3

    # Generate version if not provided
    if [[ -z "$version" ]]; then
        version=$(git describe --tags --match "[0-9]*.[0-9]*.[0-9]*" 2>/dev/null |
                  sed 's/-g\([0-9a-f]\{7\}\).*/-g\1/')
    fi

    # Determine stability
    if [[ "$version" =~ -g[0-9a-f]+ ]]; then
        stability="unstable"
    else
        stability="stable"
    fi

    # Header
    echo "$PACKAGE ($version) $stability; urgency=low"
    echo

    # Commit messages (with or without PR filter)
    local grep_filter=""
    if ! $ALL_COMMITS; then
        grep_filter="--grep=(#[0-9]\+)$"
    fi

    if [[ -n "$range_start" ]]; then
        git --no-pager log --format="  * %s" $grep_filter "$range_start..$commit"
    else
        git --no-pager log --format="  * %s" $grep_filter "$commit"
    fi

    # Footer
    echo
    git --no-pager log --format=" -- %an <%ae>  %aD" -n 1 "$commit"
    echo
}

function generate_rpm_entry() {
    local range_start=$1
    local version=$2
    local commit=$3

    # Generate version if not provided
    if [[ -z "$version" ]]; then
        version=$(git describe --tags --match "[0-9]*.[0-9]*.[0-9]*" 2>/dev/null |
                  sed 's/-g\([0-9a-f]\{7\}\).*/-g\1/')
    fi

    # Get author info
    local author_info=$(git --no-pager log --format="%an <%ae>" -n 1 "$commit")
    local date_info=$(git --no-pager log --format="%aD" -n 1 "$commit" |
                      awk '{print $1",", $3, $2, $4, $5}')

    # RPM header
    echo "* $date_info $author_info $version"

    # Commit messages (with or without PR filter)
    local grep_filter=""
    if ! $ALL_COMMITS; then
        grep_filter="--grep=(#[0-9]\+)$"
    fi

    if [[ -n "$range_start" ]]; then
        git --no-pager log --format="- %s" $grep_filter "$range_start..$commit"
    else
        git --no-pager log --format="- %s" $grep_filter "$commit"
    fi

    echo
}

# Main function to generate changelog
function generate_changelog() {
    # Get current commit and check if it's tagged
    current_commit=$(git rev-parse HEAD)
    current_tag=$(git tag --points-at "$current_commit" | grep "$RE_VERSION" | head -n 1)

    # Get version tags sorted newest first
    IFS=$'\n' read -d '' -r -a version_tags < <(git tag --sort "-version:refname" --merged HEAD | grep "$RE_VERSION")

    # Handle no tags case
    if [[ ${#version_tags[@]} -eq 0 ]]; then
        if [[ "$FORMAT" == "deb" ]]; then
            generate_deb_entry "" "" "$current_commit"
        else
            generate_rpm_entry "" "" "$current_commit"
        fi
        return
    fi

    # Special handling for --last-tag option
    if $LAST_TAG; then
        if [[ -z "$current_tag" ]]; then
            # Untagged commit - show changes since last tag
            if [[ "$FORMAT" == "deb" ]]; then
                generate_deb_entry "${version_tags[0]}" "" "$current_commit"
            else
                generate_rpm_entry "${version_tags[0]}" "" "$current_commit"
            fi
        else
            # Tagged commit - show changes for this version only
            if [[ "$FORMAT" == "deb" ]]; then
                generate_deb_entry "${version_tags[1]}" "$current_tag" "$current_commit"
            else
                generate_rpm_entry "${version_tags[1]}" "$current_tag" "$current_commit"
            fi
        fi
        return
    fi

    # Full changelog generation
    # Process current commit if it's not tagged
    if [[ -z "$current_tag" ]]; then
        if [[ "$FORMAT" == "deb" ]]; then
            generate_deb_entry "${version_tags[0]}" "" "$current_commit"
        else
            generate_rpm_entry "${version_tags[0]}" "" "$current_commit"
        fi
    fi

    # Process tags from newest to oldest
    for ((i=0; i<${#version_tags[@]}; i++)); do
        current_version_tag="${version_tags[i]}"
        next_version_tag="${version_tags[i+1]:-}"

        commit_hash=$(git rev-list -n 1 "$current_version_tag")

        if [[ "$FORMAT" == "deb" ]]; then
            generate_deb_entry "$next_version_tag" "$current_version_tag" "$commit_hash"
        else
            generate_rpm_entry "$next_version_tag" "$current_version_tag" "$commit_hash"
        fi
    done
}

# Generate the changelog
generate_changelog
